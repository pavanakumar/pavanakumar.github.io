<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mohanamuraly on Mohanamuraly</title>
    <link>http://pavanakumar.github.io/</link>
    <description>Recent content in Mohanamuraly on Mohanamuraly</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Pavanakumar Mohanamuraly, 2019</copyright>
    <lastBuildDate>Fri, 14 Jun 2019 15:19:35 +0200</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>MPI Protocols</title>
      <link>http://pavanakumar.github.io/post/mpi-protocols/</link>
      <pubDate>Fri, 14 Jun 2019 15:19:35 +0200</pubDate>
      
      <guid>http://pavanakumar.github.io/post/mpi-protocols/</guid>
      <description>

&lt;p&gt;The MPI has some protocol jargon that I have not heard so far. They are the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Aggressive eager&lt;/li&gt;
&lt;li&gt;Rendezvous with send push&lt;/li&gt;
&lt;li&gt;Rendezvous with receiver pull&lt;/li&gt;
&lt;li&gt;Rendezvous blocking (push or pull)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;They are defined in the slides from MPI group on &lt;a href=&#34;https://www.mcs.anl.gov/research/projects/mpi/tutorial/perf/mpiperf-short/sld101.htm&#34; target=&#34;_blank&#34;&gt;MPI performance&lt;/a&gt;. I got some good info on this from &lt;a href=&#34;https://graal.ens-lyon.fr/~gmarkoma/files/mpi/eager_mode.pdf&#34; target=&#34;_blank&#34;&gt;these slides&lt;/a&gt; and &lt;a href=&#34;http://wgropp.cs.illinois.edu/courses/cs598-s16/lectures/lecture24.pdf&#34; target=&#34;_blank&#34;&gt;this&lt;/a&gt;, which I will reproduce here with my own additions and notes.&lt;/p&gt;

&lt;h2 id=&#34;some-terminology&#34;&gt;Some terminology&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Message&lt;/code&gt; consists of &lt;code&gt;envelope&lt;/code&gt; and &lt;code&gt;data&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Envelope&lt;/code&gt; contains tag, communicator, length, source information, plus impl. private data&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;eager-protocol&#34;&gt;Eager protocol&lt;/h2&gt;

&lt;p&gt;Here messages are sent assuming that the destination can store the incoming data. So the send processor is quite eager to send away all its data over the network o the receiver and it is the receivers headache to deal with the network contention. Say &lt;code&gt;rank 0&lt;/code&gt; eagerly send to &lt;code&gt;rank 1&lt;/code&gt; its data then no matching receive may exist in the receiver side i.e., &lt;code&gt;rank 1&lt;/code&gt; then the system has to buffer and copy the data.&lt;/p&gt;

&lt;h2 id=&#34;eager-protocol-salient-features&#34;&gt;Eager protocol salient features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Reduction in synchronization delays&lt;/li&gt;
&lt;li&gt;Simplifies programming (just &lt;code&gt;MPI_Send&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Requires significant buffering&lt;/li&gt;
&lt;li&gt;May require active involvement of CPU to drain network at receiver&amp;rsquo;s end&lt;/li&gt;
&lt;li&gt;May introduce additional copy (buffer to final destination)&lt;/li&gt;
&lt;li&gt;Minimizes latency&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;scalability-of-eager-protocol&#34;&gt;Scalability of eager protocol&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Buffering must be reserved for arbitrary senders&lt;/li&gt;
&lt;li&gt;User-model mismatch (often expect buffering allocated entirely to &lt;em&gt;used&lt;/em&gt; connections)&lt;/li&gt;
&lt;li&gt;Common approach in implementations is to provide same buffering for all members of &lt;code&gt;MPI_COMM_WORLD&lt;/code&gt;; this is optimizing for non-scalable computations&lt;/li&gt;
&lt;li&gt;Scalable implementations that exploit message patterns are possible (but not widely implemented)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;rendezvous-protocols&#34;&gt;Rendezvous protocols&lt;/h2&gt;

&lt;p&gt;Here the sender only starts the sending when the receiver says it is ready (signals). Here the &lt;code&gt;envelope&lt;/code&gt; of the message is delivered first and then the data is delivered when the receive buffer is available for receive. So only buffering of envelopes becomes necessary.&lt;/p&gt;

&lt;h2 id=&#34;rendezvous-protocols-salient-features&#34;&gt;Rendezvous protocols salient features&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Robust and safe (except for limit on the number of envelopes)&lt;/li&gt;
&lt;li&gt;May remove copy (user to user direct)&lt;/li&gt;
&lt;li&gt;More complex programming (waits/tests)&lt;/li&gt;
&lt;li&gt;May introduce synchronization delays (waiting for receiver to ok send)&lt;/li&gt;
&lt;li&gt;Three-message handshake introduces latency&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;choosing-mpi-send-modes&#34;&gt;Choosing MPI Send Modes&lt;/h2&gt;

&lt;p&gt;There is no perfect choice for a MPI send mode; however some well good performance recommendations scenarios do exist:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Eager is faster than rendezvous until

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Data is unexpected&lt;/strong&gt;: &lt;code&gt;2*latency&lt;/code&gt; is smaller than the time to copy from buffer&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Ready can force Eager, but requires pre-posting of receives

&lt;ul&gt;
&lt;li&gt;Best when &lt;strong&gt;data is long&lt;/strong&gt; but &lt;strong&gt;not too long&lt;/strong&gt; (measured in terms of s/r)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Synchronous good

&lt;ul&gt;
&lt;li&gt;when MPI implementation has &lt;strong&gt;inadequate flow
control&lt;/strong&gt; and messages are &lt;strong&gt;large&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Wrapping Fortran Derived Types : Part 2</title>
      <link>http://pavanakumar.github.io/post/fortran-types-2/</link>
      <pubDate>Fri, 24 May 2019 16:08:09 +0200</pubDate>
      
      <guid>http://pavanakumar.github.io/post/fortran-types-2/</guid>
      <description>&lt;p&gt;In a previous post wrapping user-defined types in Fortran into C was explained using the opaque object hack. The hack was improved by adding portable size detection and direct access to array memory using pointer handles. For compilers that do not yet support &lt;code&gt;STORAGE_SIZE&lt;/code&gt; intrinsic function an alternative route is suggested in this post. Again the approach is based on the one by &lt;em&gt;Pletzer et. al., &amp;ldquo;Exposing Fortran derived types to C and other languages&amp;rdquo;, 2008&lt;/em&gt; but modified and improved to increase portability and safety.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wrapping Fortran Derived Types : Part 1</title>
      <link>http://pavanakumar.github.io/post/fortran-types/</link>
      <pubDate>Thu, 23 May 2019 00:53:26 +0200</pubDate>
      
      <guid>http://pavanakumar.github.io/post/fortran-types/</guid>
      <description>

&lt;h2 id=&#34;abstract&#34;&gt;Abstract&lt;/h2&gt;

&lt;p&gt;Fortran C/C++/Python interoperability is an important consideration while designing scientific HPC codes. Fortran to a large extent still dominates in terms of lines of code in scientific software due to its legacy, reliable mathematical libraries and many years of research into the design of its compilers. Therefore it becomes mandatory to support an array of codes and libraries developed in mixed languages say Fortran, C and C++. It is counter productive to rewrite the codes and revalidate just for the sake of using a single monolithic language.&lt;/p&gt;

&lt;h2 id=&#34;some-shortcomings-of-iso-c-binding&#34;&gt;Some shortcomings of &lt;code&gt;iso_c_binding&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The Fortran 2003 standard introduced the &lt;code&gt;iso_c_binding&lt;/code&gt; module to formalise known C interoperability hacks into Fortran language. It still leaves out a dark area, namely wrapping user defined types when the type has allocatable or pointer attributes. A simple example is shown below:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Fortran&#34; data-lang=&#34;Fortran&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;::&lt;/span&gt; my_type
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;real&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;c_double&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;pointer&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;::&lt;/span&gt; my_data(:)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end type &lt;/span&gt;my_type&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that one could also include an allocatable array inside the user defined type such as:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Fortran&#34; data-lang=&#34;Fortran&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;::&lt;/span&gt; my_type
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;real&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;c_double&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;allocatable&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;::&lt;/span&gt; my_data(:)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end type &lt;/span&gt;my_type&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The user is advised against using this approach since this is not flexible enough to expose the data outside of Fortran because a pointer variable cannot be made to point to this target array &lt;code&gt;my_data&lt;/code&gt; if it was declared &lt;code&gt;allocatable&lt;/code&gt;. For the very reason the following piece of code is invalid:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Fortran&#34; data-lang=&#34;Fortran&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;::&lt;/span&gt; my_type
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;real&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;c_double&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;allocatable&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;target&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;::&lt;/span&gt; my_data(:)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end type &lt;/span&gt;my_type&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When compiled in &lt;code&gt;gfortran&lt;/code&gt; one gets following error:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-linenos=inline&#34; data-lang=&#34;linenos=inline&#34;&gt;     real(c_double), allocatable, target :: my_data(:)
                                   1
Error: Attribute at (1) is not allowed in a TYPE definition&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Another approach one would be tempted to take is to use
the &lt;code&gt;bind(C)&lt;/code&gt; technique from &lt;code&gt;iso_c_binding&lt;/code&gt; as shown below:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Fortran&#34; data-lang=&#34;Fortran&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;bind&lt;/span&gt;(C) &lt;span style=&#34;color:#66d9ef&#34;&gt;::&lt;/span&gt; my_type
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;real&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;c_double&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;allocatable&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;target&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;::&lt;/span&gt; my_data(:)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end type &lt;/span&gt;my_type&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But this results in a similar compiler error as the &lt;code&gt;target&lt;/code&gt; approach:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-linenos=inline&#34; data-lang=&#34;linenos=inline&#34;&gt;   type, bind(C) :: my_type
                          2
     real(c_double), pointer :: my_data(:)
                                         1
Error: Component &amp;#39;my_data&amp;#39; at (1) cannot have the POINTER attribute because it is a member of the BIND(C) derived type &amp;#39;my_type&amp;#39; at (2)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;technique-1-opaque-object-handle-hack&#34;&gt;&lt;strong&gt;Technique 1&lt;/strong&gt;: Opaque object handle hack&lt;/h2&gt;

&lt;p&gt;A famous trick employed by programmers to wrap user defined Fortran types into C is the use of scratch space handles or opaque objects. Simply put the C side allocates scratch space in memory (adequate enough to store the Fortran type) and pass that as a handle to Fortran. This handle can then be safely stored in the C side and passed around to Fortran functions to do computation. This has been give in detail in the work of &lt;em&gt;Pletzer et. al., &amp;ldquo;Exposing Fortran derived types to C and other languages&amp;rdquo;, comp. sci. eng. 2008&lt;/em&gt;. The object storing the scratch memory is called the &lt;strong&gt;opaque object&lt;/strong&gt; to the Fortran type.&lt;/p&gt;

&lt;p&gt;The opaque object technique applied to our simple problem is shown below:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Fortran&#34; data-lang=&#34;Fortran&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;! @file test.f90
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;! Fortran side code
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module &lt;/span&gt;typedef
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;use &lt;/span&gt;iso_c_binding
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;::&lt;/span&gt; my_type
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;real&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;c_double&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;pointer&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;::&lt;/span&gt; my_data(:)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end type &lt;/span&gt;my_type
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end module &lt;/span&gt;typedef
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;subroutine &lt;/span&gt;c_opaque_alloc(c_obj, n)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;use &lt;/span&gt;typedef
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;implicit none
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;integer&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;c_int&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;intent&lt;/span&gt;(in) &lt;span style=&#34;color:#66d9ef&#34;&gt;::&lt;/span&gt; n
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt;(my_type) &lt;span style=&#34;color:#66d9ef&#34;&gt;::&lt;/span&gt; c_obj
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;allocate&lt;/span&gt;(c_obj%my_data(n))
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end subroutine &lt;/span&gt;c_opaque_alloc
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;subroutine &lt;/span&gt;c_opaque_free(c_obj)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;use &lt;/span&gt;typedef
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;implicit none
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;  type&lt;/span&gt;(my_type) &lt;span style=&#34;color:#66d9ef&#34;&gt;::&lt;/span&gt; c_obj
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;deallocate&lt;/span&gt;(c_obj%my_data)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end subroutine &lt;/span&gt;c_opaque_free&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the C side the following code is used to allocate the user defined type:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/** @file test.c
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  * C side code
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;  */&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define FC_GLOBAL_(name,NAME) name##_
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define OPAQUE_ALLOC FC_GLOBAL_(c_opaque_alloc, C_OPAQUE_ALLOC)
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define OPAQUE_FREE FC_GLOBAL_(c_opaque_free, C_OPAQUE_FREE)
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define OPAQUE_STORAGE_SIZE 64
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OPAQUE_ALLOC&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;c_obj, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;n);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OPAQUE_FREE&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;c_obj);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; nargs, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args[] ) {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; c_obj[OPAQUE_STORAGE_SIZE];
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16&lt;/span&gt;  OPAQUE_ALLOC(c_obj, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;n);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17&lt;/span&gt;  OPAQUE_FREE(c_obj);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The value of the &lt;code&gt;OPAQUE_STORAGE_SIZE&lt;/code&gt; is an ambiguous one and varies from one compiler to another. Pletzer et. al. gives a long list of pointer array sizes used by various compilers based on their supported processor architecture. But the author does not give a reliable method to determine this size using existing Fortran features. This is one of the main contributions of this work where we provide a reliable method to obtain this size. Fortran 2008 standard defines a new inquiry function called &lt;code&gt;STORAGE_SIZE&lt;/code&gt;. As per the standards &lt;code&gt;STORAGE_SIZE(A, [KIND])&lt;/code&gt; returns a scalar integer with the kind type parameter specified by &lt;code&gt;KIND&lt;/code&gt; (or default integer type if &lt;code&gt;KIND&lt;/code&gt; is missing). The result value is the size expressed in bits for an element of an array that has the dynamic type and type parameters of &lt;code&gt;A&lt;/code&gt;. Note that a dummy type &lt;code&gt;dummy_type&lt;/code&gt; object was created in order to obtain the internal storage size in bits of this data structure. The routine would throw an error if one passed simple the &lt;code&gt;my_type&lt;/code&gt;. Currently there does not seem to be a better way to avoid this dummy type creation.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Fortran&#34; data-lang=&#34;Fortran&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;subroutine &lt;/span&gt;c_storage_size( my_size )
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;use &lt;/span&gt;typedef
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;implicit none
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;  type&lt;/span&gt;(my_type) &lt;span style=&#34;color:#66d9ef&#34;&gt;::&lt;/span&gt; dummy_obj
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;integer&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;c_int&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;::&lt;/span&gt; my_size
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;  my_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; STORAGE_SIZE(dummy_obj, &lt;span style=&#34;color:#66d9ef&#34;&gt;c_int&lt;/span&gt;)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7&lt;/span&gt;  my_size &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; my_size &lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;! return size in bytes
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end subroutine &lt;/span&gt;c_storage_size&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define FC_GLOBAL_(name,NAME) name##_
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define OPAQUE_ALLOC FC_GLOBAL_(c_opaque_alloc, C_OPAQUE_ALLOC)
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define OPAQUE_FREE FC_GLOBAL_(c_opaque_free, C_OPAQUE_FREE)
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define OPAQUE_SIZE FC_GLOBAL_(c_storage_size, C_STORAGE_SIZE)
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OPAQUE_ALLOC&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;c_obj, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;n);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OPAQUE_FREE&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;c_obj);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OPAQUE_SIZE&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;size);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; nargs, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args[] ) {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;c_obj;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; my_size;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;  OPAQUE_SIZE(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;my_size);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;  c_obj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)malloc(my_size);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16&lt;/span&gt;  OPAQUE_ALLOC(c_obj, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;n);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17&lt;/span&gt;  OPAQUE_FREE(c_obj);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18&lt;/span&gt;  free(c_obj);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In addition, the contents of the types can be indirectly exposed to C using Fortran call back functions (Getter/Setter type). While such an approach can be good for scalar values it is inefficient for array types because two copies of the arrays
must exist in memory (one in the C side and the other in
the Fortran side). In addition, the data copy/move from one to the other is redundant. An example of this approach is provided nevertheless:&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Fortran&#34; data-lang=&#34;Fortran&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;subroutine &lt;/span&gt;c_opaque_array_copy(c_obj, n, vec)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;use &lt;/span&gt;typedef
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;implicit none
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;  type&lt;/span&gt;(my_type) &lt;span style=&#34;color:#66d9ef&#34;&gt;::&lt;/span&gt; c_obj
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;integer&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;c_int&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;intent&lt;/span&gt;(in) &lt;span style=&#34;color:#66d9ef&#34;&gt;::&lt;/span&gt; n
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;real&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;c_double&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;intent&lt;/span&gt;(in) &lt;span style=&#34;color:#66d9ef&#34;&gt;::&lt;/span&gt; vec(n)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;allocate&lt;/span&gt;(c_obj%my_data(n))
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;  c_obj%my_data(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:n) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vec(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;:n)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;write&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;,&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;) c_obj%my_data
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end subroutine &lt;/span&gt;c_opaque_array_copy&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define FC_GLOBAL_(name,NAME) name##_
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define OPAQUE_ARRAY_COPY FC_GLOBAL_(c_opaque_array_copy, C_OPAQUE_ARRAY_COPY)
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define OPAQUE_FREE FC_GLOBAL_(c_opaque_free, C_OPAQUE_FREE)
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define OPAQUE_SIZE FC_GLOBAL_(c_storage_size, C_STORAGE_SIZE)
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define SIZE 100
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OPAQUE_FREE&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;c_obj);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OPAQUE_SIZE&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;size);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OPAQUE_ARRAY_COPY&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;c_obj, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;n, &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;vec);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; nargs, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args[] ) {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;c_obj;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; my_size, i, n&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;SIZE;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; vec[SIZE];
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;SIZE; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i) vec[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19&lt;/span&gt;  OPAQUE_SIZE(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;my_size);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20&lt;/span&gt;  c_obj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)malloc(my_size);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21&lt;/span&gt;  OPAQUE_ARRAY_COPY(c_obj, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;n, vec);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22&lt;/span&gt;  OPAQUE_FREE(c_obj);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23&lt;/span&gt;  free(c_obj);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;One can improve upon this recipe and also return handles to the arrays/scalars inside the opaque handle to avoid redundant storage. C can then use these array handles to access the array data without any redundant copy/move.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Fortran&#34; data-lang=&#34;Fortran&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;subroutine &lt;/span&gt;c_opaque_array(c_obj, c_array)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;use &lt;/span&gt;typedef
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;implicit none
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;  type&lt;/span&gt;(my_type) &lt;span style=&#34;color:#66d9ef&#34;&gt;::&lt;/span&gt; c_obj
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;c_ptr&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;intent&lt;/span&gt;(out) &lt;span style=&#34;color:#66d9ef&#34;&gt;::&lt;/span&gt; c_array
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6&lt;/span&gt;  c_array &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; c_loc(c_obj%my_data(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;))
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;end subroutine &lt;/span&gt;c_opaque_array&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define FC_GLOBAL_(name,NAME) name##_
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define OPAQUE_ALLOC FC_GLOBAL_(c_opaque_alloc, C_OPAQUE_ALLOC)
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define OPAQUE_ARRAY FC_GLOBAL_(c_opaque_array, C_OPAQUE_ARRAY)
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define OPAQUE_FREE FC_GLOBAL_(c_opaque_free, C_OPAQUE_FREE)
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define OPAQUE_SIZE FC_GLOBAL_(c_storage_size, C_STORAGE_SIZE)
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#define SIZE 100
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OPAQUE_ALLOC&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;c_obj, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;n);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OPAQUE_FREE&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;c_obj);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OPAQUE_SIZE&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;size);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OPAQUE_ARRAY&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;c_obj, &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;vec);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; nargs, &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args[] ) {
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;c_obj;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; my_size, i, n&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;SIZE;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;vec;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17&lt;/span&gt;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18&lt;/span&gt;  OPAQUE_SIZE(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;my_size);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19&lt;/span&gt;  c_obj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;)malloc(my_size);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20&lt;/span&gt;  OPAQUE_ALLOC(c_obj, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;n);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21&lt;/span&gt;  OPAQUE_ARRAY(c_obj, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;vec);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;SIZE; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;i)
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23&lt;/span&gt;    vec[i] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1.0&lt;/span&gt;;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24&lt;/span&gt;  OPAQUE_FREE(c_obj);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25&lt;/span&gt;  free(c_obj);
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;While the &lt;code&gt;STORAGE_SIZE&lt;/code&gt; primitive gave us a portable and safe solution to wrap user defined types, some older Fortran compiler might not support the Fortran 2008 standards yet. In such situations one should resort to an alternative approach using &lt;code&gt;TRANSFER&lt;/code&gt; which will be presented in the second part of this work.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Access to the source code with Makefiles to be uploaded soon to GitHub after testing against Intel, GCC, PGI, and LLVM compilers.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A meshless optimised mesh-smoothing framework</title>
      <link>http://pavanakumar.github.io/publication/mesh_opti/</link>
      <pubDate>Tue, 01 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>http://pavanakumar.github.io/publication/mesh_opti/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Hybrid Parallelisation of an Algorithmically Differentiated Adjoint Solver</title>
      <link>http://pavanakumar.github.io/publication/hybrid_ad/</link>
      <pubDate>Wed, 01 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://pavanakumar.github.io/publication/hybrid_ad/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Element-free solver and tools</title>
      <link>http://pavanakumar.github.io/project/gf/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://pavanakumar.github.io/project/gf/</guid>
      <description></description>
    </item>
    
    <item>
      <title>OpenFUSE library and tools</title>
      <link>http://pavanakumar.github.io/project/fuse/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://pavanakumar.github.io/project/fuse/</guid>
      <description></description>
    </item>
    
    <item>
      <title>compressibleFOAM solver</title>
      <link>http://pavanakumar.github.io/project/cfoam/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://pavanakumar.github.io/project/cfoam/</guid>
      <description>&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.&lt;/p&gt;

&lt;p&gt;Nullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.&lt;/p&gt;

&lt;p&gt;Cras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.&lt;/p&gt;

&lt;p&gt;Suspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.&lt;/p&gt;

&lt;p&gt;Aliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Revisiting the space-filling curves for storage, reordering and partitioning mesh based data in scientific computing</title>
      <link>http://pavanakumar.github.io/publication/sfc/</link>
      <pubDate>Sun, 01 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://pavanakumar.github.io/publication/sfc/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Study on Robustness of least-squares approximation in finite point method for transonic flows</title>
      <link>http://pavanakumar.github.io/publication/aesi/</link>
      <pubDate>Wed, 01 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>http://pavanakumar.github.io/publication/aesi/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Modeling free-stream turbulence based on wind tunnel and flight data for instability studies</title>
      <link>http://pavanakumar.github.io/publication/fst/</link>
      <pubDate>Tue, 01 Sep 2009 00:00:00 +0000</pubDate>
      
      <guid>http://pavanakumar.github.io/publication/fst/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Store Separation Dynamics using Grid-free Euler Solver</title>
      <link>http://pavanakumar.github.io/publication/store/</link>
      <pubDate>Thu, 01 Jun 2006 00:00:00 +0000</pubDate>
      
      <guid>http://pavanakumar.github.io/publication/store/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
